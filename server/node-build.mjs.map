{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/db/local-db.ts","../../server/routes/auth.ts","../../server/middleware/auth.ts","../../server/routes/projects.ts","../../server/routes/public.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import { promises as fs } from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport crypto from \"crypto\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst dataDir = path.resolve(__dirname, \"../data\");\nconst dbPath = path.join(dataDir, \"db.json\");\n\nexport interface UserRecord {\n  id: string;\n  email: string;\n  username: string;\n  passwordHash: string;\n  createdAt: string;\n}\n\nexport interface ProjectRecord {\n  id: string;\n  userId: string;\n  title: string;\n  description: string;\n  image?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface DbSchema {\n  users: UserRecord[];\n  projects: ProjectRecord[];\n}\n\nasync function ensureFile() {\n  await fs.mkdir(dataDir, { recursive: true });\n  try {\n    await fs.access(dbPath);\n  } catch {\n    const empty: DbSchema = { users: [], projects: [] };\n    await fs.writeFile(dbPath, JSON.stringify(empty, null, 2), \"utf-8\");\n  }\n}\n\nasync function readDb(): Promise<DbSchema> {\n  await ensureFile();\n  const raw = await fs.readFile(dbPath, \"utf-8\");\n  try {\n    return JSON.parse(raw) as DbSchema;\n  } catch {\n    const empty: DbSchema = { users: [], projects: [] };\n    await fs.writeFile(dbPath, JSON.stringify(empty, null, 2), \"utf-8\");\n    return empty;\n  }\n}\n\nasync function writeDb(db: DbSchema) {\n  await fs.writeFile(dbPath, JSON.stringify(db, null, 2), \"utf-8\");\n}\n\nexport const db = {\n  // Users\n  async findUserByEmail(email: string) {\n    const data = await readDb();\n    return (\n      data.users.find((u) => u.email.toLowerCase() === email.toLowerCase()) ||\n      null\n    );\n  },\n  async findUserByUsername(username: string) {\n    const data = await readDb();\n    return (\n      data.users.find(\n        (u) => u.username.toLowerCase() === username.toLowerCase(),\n      ) || null\n    );\n  },\n  async createUser(params: {\n    email: string;\n    username: string;\n    passwordHash: string;\n  }) {\n    const data = await readDb();\n    if (\n      data.users.some(\n        (u) => u.email.toLowerCase() === params.email.toLowerCase(),\n      )\n    ) {\n      throw new Error(\"email_taken\");\n    }\n    if (\n      data.users.some(\n        (u) => u.username.toLowerCase() === params.username.toLowerCase(),\n      )\n    ) {\n      throw new Error(\"username_taken\");\n    }\n    const user: UserRecord = {\n      id: crypto.randomUUID(),\n      email: params.email,\n      username: params.username,\n      passwordHash: params.passwordHash,\n      createdAt: new Date().toISOString(),\n    };\n    data.users.push(user);\n    await writeDb(data);\n    return user;\n  },\n  async findUserById(id: string) {\n    const data = await readDb();\n    return data.users.find((u) => u.id === id) || null;\n  },\n\n  // Projects\n  async listProjectsByUser(userId: string) {\n    const data = await readDb();\n    return data.projects\n      .filter((p) => p.userId === userId)\n      .sort((a, b) => b.createdAt.localeCompare(a.createdAt));\n  },\n  async createProject(\n    userId: string,\n    params: { title: string; description: string; image?: string },\n  ) {\n    const data = await readDb();\n    const now = new Date().toISOString();\n    const project: ProjectRecord = {\n      id: crypto.randomUUID(),\n      userId,\n      title: params.title,\n      description: params.description,\n      image: params.image,\n      createdAt: now,\n      updatedAt: now,\n    };\n    data.projects.push(project);\n    await writeDb(data);\n    return project;\n  },\n  async findProjectByIdForUser(id: string, userId: string) {\n    const data = await readDb();\n    return (\n      data.projects.find((p) => p.id === id && p.userId === userId) || null\n    );\n  },\n  async updateProjectForUser(\n    id: string,\n    userId: string,\n    params: { title?: string; description?: string; image?: string },\n  ) {\n    const data = await readDb();\n    const idx = data.projects.findIndex(\n      (p) => p.id === id && p.userId === userId,\n    );\n    if (idx === -1) return null;\n    const current = data.projects[idx];\n    const updated: ProjectRecord = {\n      ...current,\n      ...params,\n      updatedAt: new Date().toISOString(),\n    };\n    data.projects[idx] = updated;\n    await writeDb(data);\n    return updated;\n  },\n  async deleteProjectForUser(id: string, userId: string) {\n    const data = await readDb();\n    const before = data.projects.length;\n    data.projects = data.projects.filter(\n      (p) => !(p.id === id && p.userId === userId),\n    );\n    const deleted = data.projects.length !== before;\n    if (deleted) await writeDb(data);\n    return deleted;\n  },\n};\n","import { RequestHandler } from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { db } from \"../db/local-db\";\n\nconst signToken = (userId: string) => {\n  const secret = process.env.JWT_SECRET || \"dev_secret_change_me\";\n  const expiresIn = \"7d\";\n  return jwt.sign({ userId }, secret, { expiresIn });\n};\n\nexport const register: RequestHandler = async (req, res) => {\n  try {\n    const { email, password, username } = req.body || {};\n    if (!email || !password || !username) {\n      return res\n        .status(400)\n        .json({ error: \"email, password, username required\" });\n    }\n    const byEmail = await db.findUserByEmail(email);\n    const byUsername = await db.findUserByUsername(username);\n    if (byEmail || byUsername)\n      return res.status(409).json({ error: \"User exists\" });\n    const passwordHash = await bcrypt.hash(password, 10);\n    const user = await db.createUser({ email, username, passwordHash });\n    const token = signToken(user.id);\n    return res\n      .status(201)\n      .json({\n        token,\n        user: { id: user.id, email: user.email, username: user.username },\n      });\n  } catch (e) {\n    return res.status(500).json({ error: \"Registration failed\" });\n  }\n};\n\nexport const login: RequestHandler = async (req, res) => {\n  try {\n    const { email, password } = req.body || {};\n    if (!email || !password)\n      return res.status(400).json({ error: \"email and password required\" });\n    const user = await db.findUserByEmail(email);\n    if (!user) return res.status(401).json({ error: \"Invalid credentials\" });\n    const ok = await bcrypt.compare(password, user.passwordHash);\n    if (!ok) return res.status(401).json({ error: \"Invalid credentials\" });\n    const token = signToken(user.id);\n    return res.json({\n      token,\n      user: { id: user.id, email: user.email, username: user.username },\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Login failed\" });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport jwt from \"jsonwebtoken\";\n\nexport interface AuthRequest extends Express.Request {\n  userId?: string;\n}\n\nexport const requireAuth: RequestHandler = (req: AuthRequest, res, next) => {\n  const header = req.headers.authorization || \"\";\n  const token = header.startsWith(\"Bearer \") ? header.slice(7) : undefined;\n  if (!token) return res.status(401).json({ error: \"Unauthorized\" });\n  try {\n    const secret = process.env.JWT_SECRET || \"dev_secret_change_me\";\n    const payload = jwt.verify(token, secret) as { userId: string };\n    req.userId = payload.userId;\n    next();\n  } catch {\n    return res.status(401).json({ error: \"Invalid token\" });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { AuthRequest } from \"../middleware/auth\";\nimport { db } from \"../db/local-db\";\n\nexport const listProjects: RequestHandler = async (req: AuthRequest, res) => {\n  try {\n    const userId = req.userId!;\n    const projects = await db.listProjectsByUser(userId);\n    return res.json({\n      projects: projects.map((p) => ({\n        _id: p.id,\n        title: p.title,\n        description: p.description,\n        image: p.image,\n      })),\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Failed to load projects\" });\n  }\n};\n\nexport const createProject: RequestHandler = async (req: AuthRequest, res) => {\n  try {\n    const userId = req.userId!;\n    const { title, description, image } = req.body || {};\n    if (!title || !description)\n      return res.status(400).json({ error: \"title and description required\" });\n    const project = await db.createProject(userId, {\n      title,\n      description,\n      image,\n    });\n    return res\n      .status(201)\n      .json({\n        project: {\n          _id: project.id,\n          title: project.title,\n          description: project.description,\n          image: project.image,\n        },\n      });\n  } catch (e) {\n    return res.status(500).json({ error: \"Failed to create project\" });\n  }\n};\n\nexport const updateProject: RequestHandler = async (req: AuthRequest, res) => {\n  try {\n    const userId = req.userId!;\n    const { id } = req.params;\n    const { title, description, image } = req.body || {};\n    const project = await db.updateProjectForUser(id, userId, {\n      title,\n      description,\n      image,\n    });\n    if (!project) return res.status(404).json({ error: \"Not found\" });\n    return res.json({\n      project: {\n        _id: project.id,\n        title: project.title,\n        description: project.description,\n        image: project.image,\n      },\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Failed to update project\" });\n  }\n};\n\nexport const deleteProject: RequestHandler = async (req: AuthRequest, res) => {\n  try {\n    const userId = req.userId!;\n    const { id } = req.params;\n    const deleted = await db.deleteProjectForUser(id, userId);\n    if (!deleted) return res.status(404).json({ error: \"Not found\" });\n    return res.json({ success: true });\n  } catch (e) {\n    return res.status(500).json({ error: \"Failed to delete project\" });\n  }\n};\n","import { RequestHandler } from \"express\";\nimport { db } from \"../db/local-db\";\n\nexport const getUserPortfolio: RequestHandler = async (req, res) => {\n  try {\n    const { username } = req.params as { username: string };\n    const user = await db.findUserByUsername(username);\n    if (!user) return res.status(404).json({ error: \"User not found\" });\n    const projects = await db.listProjectsByUser(user.id);\n    return res.json({\n      user: { id: user.id, username: user.username },\n      projects: projects.map((p) => ({\n        _id: p.id,\n        title: p.title,\n        description: p.description,\n        image: p.image,\n      })),\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Failed to load portfolio\" });\n  }\n};\n","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { register, login } from \"./routes/auth\";\nimport { requireAuth } from \"./middleware/auth\";\nimport {\n  listProjects,\n  createProject,\n  updateProject,\n  deleteProject,\n} from \"./routes/projects\";\nimport { getUserPortfolio } from \"./routes/public\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Using local file database (no external setup required)\n\n  // Health\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  // Demo\n  app.get(\"/api/demo\", handleDemo);\n\n  // Auth\n  app.post(\"/api/auth/register\", register);\n  app.post(\"/api/auth/login\", login);\n  // Duplicate routes without /api for environments that strip the functions prefix\n  app.post(\"/auth/register\", register);\n  app.post(\"/auth/login\", login);\n\n  // Projects CRUD (auth required)\n  app.get(\"/api/projects\", requireAuth, listProjects);\n  app.post(\"/api/projects\", requireAuth, createProject);\n  app.put(\"/api/projects/:id\", requireAuth, updateProject);\n  app.delete(\"/api/projects/:id\", requireAuth, deleteProject);\n  // Duplicates without /api\n  app.get(\"/projects\", requireAuth, listProjects);\n  app.post(\"/projects\", requireAuth, createProject);\n  app.put(\"/projects/:id\", requireAuth, updateProject);\n  app.delete(\"/projects/:id\", requireAuth, deleteProject);\n\n  // Public portfolio data\n  app.get(\"/api/users/:username/projects\", getUserPortfolio);\n  app.get(\"/users/:username/projects\", getUserPortfolio);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["__dirname","fs","db","app","express"],"mappings":"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"}